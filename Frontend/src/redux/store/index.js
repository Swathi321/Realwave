import { combineReducers, createStore, applyMiddleware } from 'redux';
import { routeChange } from './../actions';
import { timelinePlayer, liveCamFullscreenStatus, storeChange, searchFilter, themeReducer, updateGridData, selectedTimelineVideo, exitFullScreen, roleData, userDetail, createRoleData, reloadGrid, screenDetails, screenResizedReducer, fullScreenVideo, getGridFilter, getGridSearch, liveVideoClick, sameWindow, selectedCameraData, getRoleIdData, updateRoleData, scaleReport, syncplaybackState } from '../../redux/reducer';
import thunk from 'redux-thunk';
import * as ActionTypes from './../actions/httpRequest';

const reducer = combineReducers({
  getTemperature: ActionTypes.getTemperature.reducer,
  login: ActionTypes.loginAction.reducer,
  socialgoogleAction: ActionTypes.socialGoogleAction.reducer,
  socialfacebookAction: ActionTypes.socialFacebookAction.reducer,
  getSalesData: ActionTypes.getSalesData.reducer,
  getReceipt: ActionTypes.getReceipt.reducer,
  getDashboardData: ActionTypes.getDashboardData.reducer,
  getNoSales: ActionTypes.getNoSales.reducer,
  getVoidSales: ActionTypes.getVoidSales.reducer,
  getWeeklySales: ActionTypes.getWeeklySales.reducer,
  getSavedSales: ActionTypes.getSavedSales.reducer,
  getEventFeed: ActionTypes.getEventFeed.reducer,
  getTopSellingItems: ActionTypes.getTopSellingItems.reducer,
  getSuspiciousTransactions: ActionTypes.getSuspiciousTransactions.reducer,
  getRecentPromotions: ActionTypes.getRecentPromotions.reducer,
  addComment: ActionTypes.addComment.reducer,
  getCommentList: ActionTypes.getCommentList.reducer,
  universalSearch: ActionTypes.universalSearch.reducer,
  gridUniversalSearch: ActionTypes.gridUniversalSearch.reducer,
  setNewPassword: ActionTypes.setNewPassword.reducer,
  forgotPassword: ActionTypes.forgotPassword.reducer,
  resetPassword: ActionTypes.resetPassword.reducer,
  checkValidForgotLink: ActionTypes.checkValidForgotLink.reducer,
  getTopSelling: ActionTypes.getTopSelling.reducer,
  suspiciousTransactions: ActionTypes.suspiciousTransactions.reducer,
  routeChange: routeChange,
  exitFullScreen,
  liveVideoClick,
  storeChange: storeChange,
  userData: ActionTypes.userData.reducer,
  saveUser: ActionTypes.saveUser.reducer,
  roleListUser: ActionTypes.roleListUser.reducer,
  clientRegionStore: ActionTypes.clientRegionStore.reducer,
  updateUser: ActionTypes.updateUser.reducer,
  deleteUser: ActionTypes.deleteUser.reducer,
  storeData: ActionTypes.storeData.reducer,
  getCombos: ActionTypes.getCombos.reducer,
  cameraData: ActionTypes.cameraData.reducer,
  cameraRecord: ActionTypes.cameraRecord.reducer,
  storesData: ActionTypes.storesData.reducer,
  updateReceipt: ActionTypes.updateReceipt.reducer,
  getStoreListAfterUserUpdate: ActionTypes.getStoreListAfterUserUpdate.reducer,
  searchFilter,
  selectedTimelineVideo,
  searchFilterList: ActionTypes.searchFilterList.reducer,
  theme: themeReducer,
  getDirectoriesAndLogs: ActionTypes.getDirectoriesAndLogs.reducer,
  saveActivityLog: ActionTypes.saveActivityLog.reducer,
  getActivityLogs: ActionTypes.getActivityLogs.reducer,
  updateGridData,
  getTimelinePlayerData: ActionTypes.getTimelinePlayerData.reducer,
  videoShare: ActionTypes.videoShare.reducer,
  getUploadedFaces: ActionTypes.getUploadedFaces.reducer,
  saveFace: ActionTypes.saveFace.reducer,
  getFace: ActionTypes.getFace.reducer,
  saveBookmark: ActionTypes.saveBookmark.reducer,
  getBookMarks: ActionTypes.getBookMarks.reducer,
  deleteBookMarkData: ActionTypes.deleteBookMarkData.reducer,
  cameraTags: ActionTypes.cameraTags.reducer,
  getRoiTags: ActionTypes.getRoiTags.reducer,
  deleteClientCameraTags: ActionTypes.deleteClientCameraTags.reducer,
  deleteFace: ActionTypes.deleteFace.reducer,
  getStoreCameras: ActionTypes.getStoreCameras.reducer,
  getStoreId: ActionTypes.getStoreId.reducer,
  clientData: ActionTypes.clientData.reducer,
  clientDataType: ActionTypes.clientDataType.reducer,
  saveClient: ActionTypes.saveClient.reducer,
  getEventFeedTimeline: ActionTypes.getEventFeedTimeline.reducer,
  roleData: roleData,
  scaleReport: scaleReport,
  kicReports: ActionTypes.kicReports.reducer,
  saveRole: ActionTypes.saveRole.reducer,
  permissionData: ActionTypes.permissionData.reducer,
  updateRolePermission: updateRoleData,
  roleIdData: getRoleIdData,
  createRole: createRoleData,
  deleteRole: ActionTypes.deleteRole.reducer,
  permissionPageData: ActionTypes.permissionPageData.reducer,
  permissionFunctionData: ActionTypes.permissionFunctionData.reducer,
  permissionWidgetData: ActionTypes.permissionWidgetData.reducer,
  permissionReportsData: ActionTypes.permissionReportsData.reducer,
  userDetail,
  reloadGrid,
  getSalesDashboard: ActionTypes.getSalesDashboard.reducer,
  userLogOut: ActionTypes.userLogOut.reducer,
  overlayGraphData: ActionTypes.overlayGraphData.reducer,
  getFaceEvents: ActionTypes.getFaceEvents.reducer,
  getSales: ActionTypes.getSales.reducer,
  getSetEventLikeData: ActionTypes.getSetEventLikeData.reducer,
  preferenceData: ActionTypes.preferenceData.reducer,
  alertData: ActionTypes.alertData.reducer,
  saveAlert: ActionTypes.saveAlert.reducer,
  getAlertCommentList: ActionTypes.getAlertCommentList.reducer,
  addAlertComment: ActionTypes.addAlertComment.reducer,
  getSmartDeviceTemperature: ActionTypes.getSmartDeviceTemperature.reducer,
  alarmData: ActionTypes.alarmData.reducer,
  saveAlarm: ActionTypes.saveAlarm.reducer,
  getAlarmCommentList: ActionTypes.getAlarmCommentList.reducer,
  addAlarmComment: ActionTypes.addAlarmComment.reducer,
  screenDetails,
  dashboardConfigAction: ActionTypes.dashboardConfigAction.reducer,
  smartDeviceData: ActionTypes.smartDeviceData.reducer,
  updateAlarm: ActionTypes.updateAlarm.reducer,
  getUserPreference: ActionTypes.getUserPreference.reducer,
  saveUserPreference: ActionTypes.saveUserPreference.reducer,
  deletePreference: ActionTypes.deletePreference.reducer,
  ptzRequest: ActionTypes.ptzRequest.reducer,
  getCameraData: ActionTypes.getCameraData.reducer,
  screenResizedReducer,
  getPeopleCount: ActionTypes.getPeopleCount.reducer,
  fullScreenVideo,
  getLastTransation: ActionTypes.getLastTransation.reducer,
  videoRecording: ActionTypes.videoRecording.reducer,
  getGridFilter,
  getCameraLogs: ActionTypes.getCameraLogs.reducer,
  getPeopleCountLogs: ActionTypes.getPeopleCountLogs.reducer,
  liveCamFullscreenStatus: liveCamFullscreenStatus,
  getPeopleCountWidget: ActionTypes.getPeopleCountWidget.reducer,
  getCustomerCountChart: ActionTypes.getCustomerCountChart.reducer,
  timelinePlayer: timelinePlayer,
  createCustomVideoClip: ActionTypes.createCustomVideoClip.reducer,
  gridSearchImage: ActionTypes.gridSearchImage.reducer,
  getPendingVideoClip: ActionTypes.getPendingVideoClip.reducer,
  getCameraClipData: ActionTypes.getCameraClipData.reducer,
  getReceiptClip: ActionTypes.getReceiptClip.reducer,
  checkVideoAvailable: ActionTypes.checkVideoAvailable.reducer,
  getGridSearch,
  alarmEvent: ActionTypes.alarmEvent.reducer,
  macAddress: ActionTypes.macAddress.reducer,
  startStream: ActionTypes.startStream.reducer,
  playbackRequest: ActionTypes.playbackRequest.reducer,
  playbackStop: ActionTypes.playbackStop.reducer,
  daemon: ActionTypes.daemon.reducer,
  getIndustry: ActionTypes.getIndustry.reducer,
  deleteSmartDevice: ActionTypes.deleteSmartDevice.reducer,
  deleteWidget: ActionTypes.deleteWidget.reducer,
  deleteReport: ActionTypes.deleteReport.reducer,
  deleteIndustry: ActionTypes.deleteIndustry.reducer,
  getReport: ActionTypes.getReport.reducer,
  getWidget: ActionTypes.getWidget.reducer,
  getSmartDevice: ActionTypes.getSmartDevice.reducer,
  getsmartDeviceType: ActionTypes.getsmartDeviceType.reducer,
  getSmartDeviceTypes: ActionTypes.getSmartDeviceTypes.reducer,
  getAdminRoles: ActionTypes.getAdminRoles.reducer,
  sameWindow: sameWindow,
  selectedCameraData: selectedCameraData,
  // createClientProfile:createClientProfileData,
  saveClientRole: ActionTypes.saveClientRole.reducer,
  clientGlobalRegion: ActionTypes.clientGlobalRegion.reducer,
  clientProfile: ActionTypes.clientProfile.reducer,
  getClientRoles: ActionTypes.getClientRoles.reducer,
  getClientPermission: ActionTypes.getClientPermission.reducer,
  getWidgetsAndReports: ActionTypes.getWidgetsAndReports.reducer,
  clientSystemSettings: ActionTypes.clientSystemSettings.reducer,
  globalWidgetsReports: ActionTypes.globalWidgetsReports.reducer,
  regionsByClientId: ActionTypes.regionsByClientId.reducer,
  deleteClientRegion: ActionTypes.deleteClientRegion.reducer,
  updateClientRegion: ActionTypes.updateClientRegion.reducer,
  getAllIndustries: ActionTypes.getAllIndustries.reducer,
  // clientRegion: ActionTypes.clientRegion.reducer,
  reverseSSH: ActionTypes.reverseSSH.reducer,
  replaceSSHKey: ActionTypes.replaceSSHKey.reducer,
  uploadSiteLogs: ActionTypes.uploadSiteLogs.reducer,
  bookmarkType: ActionTypes.bookmarkType.reducer,
  bookmarkTypeClient: ActionTypes.bookmarkTypeClient.reducer,
  deleteClientBookmark: ActionTypes.deleteClientBookmark.reducer,
  getSeraLocations: ActionTypes.getSeraLocations.reducer,
  getSeraByLocation: ActionTypes.getSeraByLocation.reducer,
  deleteSeraDevice: ActionTypes.deleteSeraDevice.reducer,
  getKIClocations: ActionTypes.getKIClocations.reducer,
  getKICdeviceByLocation: ActionTypes.getKICdeviceByLocation.reducer,
  deleteKICDevice: ActionTypes.deleteKICDevice.reducer,
  getLinkedLocationSites: ActionTypes.getLinkedLocationSites.reducer,
  siteSmartDevice: ActionTypes.siteSmartDevice.reducer,
  syncplaybackState: syncplaybackState,
  hasBoxRecentlyRestarted: ActionTypes.hasBoxRecentlyRestarted.reducer
});

const initialState = {};

// export default persistStore(createStore(
//   persistReducer(persistConfig,reducer),
//   initialState,
//   applyMiddleware(thunk)
// ));
export default createStore(
  reducer,
  initialState,
  applyMiddleware(thunk)
)


//  const persistor=persistStore(store)
//  export default persistor(store)

